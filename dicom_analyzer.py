#!/usr/bin/env python3
"""
DICOM Analyzer Script (Simplified)
==================================

–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ DICOM —Ñ–∞–π–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MedGemma.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ DICOM —Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –∏ –≤—ã–≤–æ–¥–∏—Ç –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- transformers
- torch
- pydicom
- PIL
- numpy
- tqdm (–¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞)
"""

import os
import sys
import glob
import numpy as np
from pathlib import Path
import pydicom
from PIL import Image
import torch
from transformers import pipeline
from tqdm import tqdm
import warnings
warnings.filterwarnings('ignore')

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å DICOM —Ñ–∞–π–ª–∞–º–∏ (–∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –ø—É—Ç—å)
DICOM_FOLDER_PATH = "data"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–∞–ø–∫–∞ data

# Debug —Ä–µ–∂–∏–º - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ N –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
DEBUG_MODE = False  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ True –¥–ª—è debug —Ä–µ–∂–∏–º–∞
DEBUG_LIMIT = 50    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ debug —Ä–µ–∂–∏–º–µ

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ MedGemma
AVAILABLE_MODELS = {
    "4b": "google/medgemma-4b-it",
    "27b": "google/medgemma-27b-it"
}
DEFAULT_MODEL = "4b"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º 4B –º–æ–¥–µ–ª—å

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –ê–ù–ê–õ–ò–ó–ê –°–ù–ò–ú–ö–û–í =====
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã CT windowing –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_WINDOW_LEVEL = -550   # WL (—Ü–µ–Ω—Ç—Ä –æ–∫–Ω–∞)
DEFAULT_WINDOW_WIDTH = 1600   # WW (—à–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞)

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–Ω–µ–≤–º–æ–Ω–∏–∏
PNEUMONIA_DETECTION_WINDOWS = {
    "lung_soft": {"wl": -400, "ww": 1400},      # –ú—è–≥–∫–æ–µ –ª–µ–≥–æ—á–Ω–æ–µ –æ–∫–Ω–æ
    "infection": {"wl": -300, "ww": 1200},      # –û–∫–Ω–æ –¥–ª—è –∏–Ω—Ñ–µ–∫—Ü–∏–π
    "standard_lung": {"wl": -600, "ww": 1600}   # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ª–µ–≥–æ—á–Ω–æ–µ
}

# –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π)
ANALYSIS_PROMPTS = {
    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª—å —ç–∫—Å–ø–µ—Ä—Ç–∞
    "system": "You are an expert pulmonologist and chest radiologist with extensive experience in detecting pneumonia, COVID-19, and other infectious lung diseases. You are highly skilled at identifying subtle signs of consolidation, ground-glass opacities, and early inflammatory changes.",
    
    # –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    "single_image": "CRITICAL: Carefully examine this chest CT scan for ANY signs of pneumonia or lung infection. Look specifically for: 1) Consolidations (areas of increased density), 2) Ground-glass opacities (hazy areas), 3) Air bronchograms, 4) Bilateral or unilateral involvement, 5) Pleural effusions, 6) Lymphadenopathy. Even subtle changes should be noted. Compare lung fields systematically - right vs left, upper vs lower lobes. If you see ANY abnormal density, opacity, or architectural distortion, describe it in detail. Do NOT dismiss subtle findings. Report both normal and abnormal findings explicitly.",
    
    # –ü—Ä–æ–º–ø—Ç –¥–ª—è –±–∞—Ç—á–µ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–∫—Ä–∞—Ç–∫–∏–π)
    "batch_analysis": "Examine this chest CT for pneumonia signs: consolidations, ground-glass opacities, air bronchograms, pleural changes. Look carefully at all lung segments. Report ANY abnormal densities or opacities, even if subtle. State clearly if lungs appear normal or if there are concerning findings.",
    
    # –ü—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–µ—Ä–∏–∏
    "series_report": "Based on analysis of {count} chest CT images from a DICOM series, create a comprehensive pulmonary radiological report focusing on pneumonia detection. Carefully review all individual findings for: consolidations, ground-glass changes, air bronchograms, bilateral involvement patterns typical of pneumonia. Here are the individual analyses:\n\n{analyses}\n\nProvide a definitive assessment: are there signs of pneumonia/infection? What is the pattern and distribution? What is your clinical recommendation?",
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞
    "series_system": "You are an expert pulmonologist and chest radiologist specializing in pneumonia detection and infectious lung disease. You have extensive experience identifying subtle signs of lung infection that others might miss."
}

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
GENERATION_PARAMS = {
    "single_image_tokens": 300,    # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–Ω–µ–≤–º–æ–Ω–∏–∏
    "batch_tokens": 200,           # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–∞—Ç–æ–ª–æ–≥–∏–π
    "series_report_tokens": 500    # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGE_PROCESSING = {
    "convert_to_hu": True,         # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Hounsfield Units
    "apply_windowing": True,       # –ü—Ä–∏–º–µ–Ω—è—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–∫–Ω–æ
    "default_modality": "CT",      # –ú–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    "fallback_normalization": True # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å min-max –µ—Å–ª–∏ –Ω–µ CT
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –±–∞—Ç—á–µ–π
PERFORMANCE_SETTINGS = {
    "batch_size_cuda": 8,          # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è CUDA GPU (RTX A5000: 24GB)
    "batch_size_cpu": 1,           # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è CPU
    "auto_batch_size": True,       # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
    "max_batch_size": 16,          # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
    "memory_safety_margin": 0.8    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏ (80%)
}

class DICOMAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ DICOM —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é MedGemma"""
    
    def __init__(self, model_name="4b", window_level=DEFAULT_WINDOW_LEVEL, window_width=DEFAULT_WINDOW_WIDTH, batch_size=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã windowing
        self.window_level = window_level
        self.window_width = window_width
        print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã CT –æ–∫–Ω–∞: WL={self.window_level}, WW={self.window_width}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞
        if batch_size is not None:
            self.batch_size = batch_size
            print(f"üîß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {self.batch_size}")
        else:
            self.batch_size = PERFORMANCE_SETTINGS["batch_size_cuda"] if self.device == "cuda" else PERFORMANCE_SETTINGS["batch_size_cpu"]
            print(f"‚öôÔ∏è  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {self.batch_size}")
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        if model_name not in AVAILABLE_MODELS:
            print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å '{model_name}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {list(AVAILABLE_MODELS.keys())}")
            model_name = DEFAULT_MODEL
            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {model_name}")
        
        self.model_name = model_name
        self.model_path = AVAILABLE_MODELS[model_name]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MedGemma pipeline
        print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º MedGemma –º–æ–¥–µ–ª—å: {self.model_path}")
        self.pipe = pipeline(
            "image-text-to-text",
            model=self.model_path,
            torch_dtype=torch.bfloat16 if self.device == "cuda" else torch.float32,
            device=self.device,
        )
        print(f"MedGemma {model_name.upper()} –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ 'pipelines sequentially on GPU' - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞—Ç—á–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        self.results = []
        
    def apply_ct_windowing(self, image_array, window_center=40, window_width=400):
        """
        –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–∫–Ω–∞ –¥–ª—è CT –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –≤ —Ä–∞–¥–∏–æ–ª–æ–≥–∏–∏)
        
        Args:
            image_array (numpy.ndarray): –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø–∏–∫—Å–µ–ª–µ–π –≤ HU
            window_center (int): –¶–µ–Ω—Ç—Ä –æ–∫–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 40 HU –¥–ª—è –º—è–≥–∫–∏—Ö —Ç–∫–∞–Ω–µ–π)
            window_width (int): –®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 400 HU)
            
        Returns:
            numpy.ndarray: –ú–∞—Å—Å–∏–≤ –ø–∏–∫—Å–µ–ª–µ–π 0-255
        """
        min_hu = window_center - window_width // 2
        max_hu = window_center + window_width // 2
        
        # –û–±—Ä–µ–∑–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –æ–∫–Ω—É
        windowed = np.clip(image_array, min_hu, max_hu)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É 0-255
        if max_hu > min_hu:
            windowed = ((windowed - min_hu) / (max_hu - min_hu) * 255).astype(np.uint8)
        else:
            windowed = np.zeros_like(windowed, dtype=np.uint8)
        
        return windowed
    
    def load_dicom_as_image(self, dicom_path):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ DICOM —Ñ–∞–π–ª–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PIL Image —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º CT windowing
        
        Args:
            dicom_path (str): –ü—É—Ç—å –∫ DICOM —Ñ–∞–π–ª—É
            
        Returns:
            PIL.Image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ DICOM —Ñ–∞–π–ª–∞
            dicom = pydicom.dcmread(dicom_path)
            image_array = dicom.pixel_array.astype(np.float32)
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Rescale Slope –∏ Intercept (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ HU –µ–¥–∏–Ω–∏—Ü—ã)
            if hasattr(dicom, 'RescaleSlope') and hasattr(dicom, 'RescaleIntercept'):
                slope = float(dicom.RescaleSlope)
                intercept = float(dicom.RescaleIntercept)
                image_array = image_array * slope + intercept
                print(f"–ü—Ä–∏–º–µ–Ω–µ–Ω—ã DICOM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: Slope={slope}, Intercept={intercept}")
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–∫–Ω–∞
            modality = getattr(dicom, 'Modality', 'CT')
            body_part = getattr(dicom, 'BodyPartExamined', '').upper()
            
            # –í—ã–±–æ—Ä –æ–∫–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            if modality == 'CT':
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
                window_center, window_width = self.window_level, self.window_width
                print(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–æ CT –æ–∫–Ω–æ: WL={window_center}, WW={window_width}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                if 'BRAIN' in body_part or 'HEAD' in body_part:
                    # –ú–æ–∑–≥–æ–≤–æ–µ –æ–∫–Ω–æ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                    # window_center, window_width = 40, 80
                    # print(f"–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –º–æ–∑–≥–æ–≤–æ–µ –æ–∫–Ω–æ: WL={window_center}, WW={window_width}")
                    pass
                elif 'BONE' in body_part:
                    # –ö–æ—Å—Ç–Ω–æ–µ –æ–∫–Ω–æ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)  
                    # window_center, window_width = 400, 1800
                    # print(f"–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–æ—Å—Ç–Ω–æ–µ –æ–∫–Ω–æ: WL={window_center}, WW={window_width}")
                    pass
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–º–µ–Ω—è–µ–º–æ–º –æ–∫–Ω–µ
                min_hu = window_center - window_width // 2
                max_hu = window_center + window_width // 2
                print(f"–î–∏–∞–ø–∞–∑–æ–Ω HU: {min_hu} –¥–æ {max_hu} (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–µ–≥–∫–∏—Ö)")
                print(f"–ê–Ω–∞—Ç–æ–º–∏—á–µ—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å: {body_part or 'CHEST/LUNG (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'}")
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π (X-ray –∏ —Ç.–¥.) –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
                if image_array.max() > image_array.min():
                    image_array = (image_array - image_array.min()) / (image_array.max() - image_array.min())
                    image_array = (image_array * 255).astype(np.uint8)
                else:
                    image_array = np.zeros_like(image_array, dtype=np.uint8)
                print(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ min-max –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏: {modality}")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PIL Image
                image = Image.fromarray(image_array, mode='L')
                image_rgb = Image.new('RGB', image.size)
                image_rgb.paste(image)
                return image_rgb
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ CT windowing
            windowed_array = self.apply_ct_windowing(image_array, window_center, window_width)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PIL Image
            image = Image.fromarray(windowed_array, mode='L')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ RGB (MedGemma –æ–∂–∏–¥–∞–µ—Ç RGB)
            image_rgb = Image.new('RGB', image.size)
            image_rgb.paste(image)
            
            return image_rgb
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {dicom_path}: {e}")
            return None
    
    def analyze_image(self, image, file_path):
        """
        –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é MedGemma
        
        Args:
            image (PIL.Image): –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            file_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è MedGemma
            messages = [
                {
                    "role": "system",
                    "content": [{"type": "text", "text": ANALYSIS_PROMPTS["system"]}]
                },
                {
                    "role": "user", 
                    "content": [
                        {"type": "text", "text": ANALYSIS_PROMPTS["single_image"]},
                        {"type": "image", "image": image}
                    ]
                }
            ]
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç MedGemma
            output = self.pipe(text=messages, max_new_tokens=GENERATION_PARAMS["single_image_tokens"])
            analysis_text = output[0]["generated_text"][-1]["content"]
            
            return {
                'file_path': file_path,
                'analysis': analysis_text,
                'file_name': os.path.basename(file_path)
            }
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {file_path}: {e}")
            return {
                'file_path': file_path,
                'analysis': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}',
                'file_name': os.path.basename(file_path)
            }
    
    def analyze_all_images(self, images, file_paths):
        """
        –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å—Ä–∞–∑—É
        
        Args:
            images (list): –°–ø–∏—Å–æ–∫ PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            file_paths (list): –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–∞–∂ –∏–∑ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± - –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
            # MedGemma –º–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞ —Ä–∞–∑
            # –ü–æ—ç—Ç–æ–º—É –±—É–¥–µ–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –≤—Å–µ—Ö
            
            if not images:
                return {
                    'file_paths': file_paths,
                    'analysis': '–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞',
                    'total_files': 0
                }
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            main_image = images[0]
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è MedGemma (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–ª–æ–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
            messages = [
                {
                    "role": "system",
                    "content": [{"type": "text", "text": ANALYSIS_PROMPTS["series_system"]}]
                },
                {
                    "role": "user", 
                    "content": [
                        {"type": "text", "text": f"Analyze this chest CT image from a series of {len(images)} DICOM files. Focus on lung pathology and provide detailed assessment of this representative image with general recommendations for the entire series."},
                        {"type": "image", "image": main_image}
                    ]
                }
            ]
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç MedGemma
            output = self.pipe(text=messages, max_new_tokens=300)
            analysis_text = output[0]["generated_text"][-1]["content"]
            
            return {
                'file_paths': file_paths,
                'analysis': analysis_text,
                'total_files': len(images),
                'analyzed_image': os.path.basename(file_paths[0]) if file_paths else "unknown"
            }
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            return {
                'file_paths': file_paths,
                'analysis': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}',
                'total_files': len(images),
                'analyzed_image': "unknown"
            }
    
    def create_combined_analysis(self, analyses, file_paths):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
        
        Args:
            analyses (list): –°–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤ –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            file_paths (list): –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
            
        Returns:
            dict: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞–Ω–∞–ª–∏–∑—ã –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
            combined_text = "\n\n".join([f"Analysis {i+1}: {analysis}" for i, analysis in enumerate(analyses)])
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è MedGemma –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            messages = [
                {
                    "role": "system",
                    "content": [{"type": "text", "text": ANALYSIS_PROMPTS["series_system"]}]
                },
                {
                    "role": "user", 
                    "content": [
                        {"type": "text", "text": ANALYSIS_PROMPTS["series_report"].format(count=len(analyses), analyses=combined_text)}
                    ]
                }
            ]
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç MedGemma
            output = self.pipe(text=messages, max_new_tokens=GENERATION_PARAMS["series_report_tokens"])
            combined_analysis = output[0]["generated_text"][-1]["content"]
            
            return {
                'file_paths': file_paths,
                'analysis': combined_analysis,
                'total_files': len(analyses),
                'individual_analyses': analyses
            }
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑, –ø—Ä–æ—Å—Ç–æ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç—ã
            combined_text = "\n\n".join([f"Analysis {i+1}: {analysis}" for i, analysis in enumerate(analyses)])
            return {
                'file_paths': file_paths,
                'analysis': f"Combined Analysis (Individual Reports):\n\n{combined_text}",
                'total_files': len(analyses),
                'individual_analyses': analyses
            }
    
    def analyze_batch(self, images, file_paths):
        """
        –ê–Ω–∞–ª–∏–∑ –±–∞—Ç—á–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Args:
            images (list): –°–ø–∏—Å–æ–∫ PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            file_paths (list): –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤
        """
        batch_analyses = []
        
        for image, file_path in zip(images, file_paths):
            try:
                # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è MedGemma
                messages = [
                    {
                        "role": "system",
                        "content": [{"type": "text", "text": ANALYSIS_PROMPTS["system"]}]
                    },
                    {
                        "role": "user", 
                        "content": [
                            {"type": "text", "text": ANALYSIS_PROMPTS["batch_analysis"]},
                            {"type": "image", "image": image}
                        ]
                    }
                ]
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç MedGemma
                output = self.pipe(text=messages, max_new_tokens=GENERATION_PARAMS["batch_tokens"])
                analysis_text = output[0]["generated_text"][-1]["content"]
                
                batch_analyses.append(analysis_text)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {file_path}: {e}")
                batch_analyses.append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        
        return batch_analyses
    
    def analyze_directory(self, directory_path):
        """
        –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö DICOM —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        
        Args:
            directory_path (str): –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å DICOM —Ñ–∞–π–ª–∞–º–∏
        """
        if not os.path.exists(directory_path):
            print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        print(f"\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º DICOM —Ñ–∞–π–ª—ã –≤: {directory_path}")
        
        # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö DICOM —Ñ–∞–π–ª–æ–≤
        dicom_files = []
        for root, dirs, files in os.walk(directory_path):
            for file in files:
                if file.lower().endswith(('.dcm', '.dicom')):
                    dicom_files.append(os.path.join(root, file))
        
        if not dicom_files:
            print(f"DICOM —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {directory_path}")
            return
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(dicom_files)} DICOM —Ñ–∞–π–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º debug —Ä–µ–∂–∏–º
        if DEBUG_MODE:
            # –ë–µ—Ä–µ–º –∫–∞–∂–¥—ã–π 5-–π —Ñ–∞–π–ª –¥–æ –∫–æ–Ω—Ü–∞
            debug_files = []
            for i in range(0, len(dicom_files), 5):  # –ö–∞–∂–¥—ã–π 5-–π —Ñ–∞–π–ª
                debug_files.append(dicom_files[i])
            dicom_files = debug_files
            print(f"üêõ DEBUG –†–ï–ñ–ò–ú: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 5-–π —Ñ–∞–π–ª, –≤—Å–µ–≥–æ {len(dicom_files)} —Ñ–∞–π–ª–æ–≤")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        images = []
        valid_files = []
        
        print("–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        for dicom_file in tqdm(dicom_files, desc="–ó–∞–≥—Ä—É–∑–∫–∞ DICOM —Ñ–∞–π–ª–æ–≤", unit="—Ñ–∞–π–ª"):
            image = self.load_dicom_as_image(dicom_file)
            if image is not None:
                images.append(image)
                valid_files.append(dicom_file)
        
        if not images:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
            return
        
        print(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–∞—Ç—á–∞–º–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ GPU
        print("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        all_analyses = []
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ GPU
        batch_size = self.batch_size
        total_batches = (len(images) + batch_size - 1) // batch_size
        print(f"üìä –í—Å–µ–≥–æ –±–∞—Ç—á–µ–π: {total_batches} (–ø–æ {batch_size} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –±–∞—Ç—á–µ)")
        
        for batch_idx in tqdm(range(total_batches), desc="–ê–Ω–∞–ª–∏–∑ –±–∞—Ç—á–µ–π", unit="–±–∞—Ç—á"):
            start_idx = batch_idx * batch_size
            end_idx = min(start_idx + batch_size, len(images))
            batch_images = images[start_idx:end_idx]
            batch_files = valid_files[start_idx:end_idx]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞—Ç—á
            batch_analyses = self.analyze_batch(batch_images, batch_files)
            all_analyses.extend(batch_analyses)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
        combined_result = self.create_combined_analysis(all_analyses, valid_files)
        self.results.append(combined_result)
    
    def analyze_single_file(self, file_path):
        """
        –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ DICOM —Ñ–∞–π–ª–∞
        
        Args:
            file_path (str): –ü—É—Ç—å –∫ DICOM —Ñ–∞–π–ª—É
        """
        if not os.path.exists(file_path):
            print(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        print(f"\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: {file_path}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image = self.load_dicom_as_image(file_path)
        if image is None:
            return
        
        # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        result = self.analyze_image(image, file_path)
        self.results.append(result)
        
        print(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è —Ñ–∞–π–ª–∞: {result['file_name']}")
    
    def print_results_table(self):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –≤–∏–¥–µ –∫—Ä–∞—Å–∏–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        if not self.results:
            print("\n–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
            return
        
        print("\n" + "="*100)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê DICOM –§–ê–ô–õ–û–í")
        print(f"–ú–æ–¥–µ–ª—å: MedGemma-{self.model_name.upper()} ({self.model_path})")
        print("="*100)
        
        # –í—ã–≤–æ–¥ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        for idx, result in enumerate(self.results, 1):
            print(f"\nüìä –ê–ù–ê–õ–ò–ó –°–ï–†–ò–ò {idx}:")
            print("-" * 100)
            
            if 'total_files' in result:
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
                print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {result['total_files']}")
                if 'analyzed_image' in result:
                    print(f"üîç –ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {result['analyzed_image']}")
                print(f"üìÇ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
                for file_path in result['file_paths'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
                    print(f"   - {os.path.basename(file_path)}")
                if len(result['file_paths']) > 5:
                    print(f"   ... –∏ –µ—â–µ {len(result['file_paths']) - 5} —Ñ–∞–π–ª–æ–≤")
                print(f"\nüí¨ –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó –ü–û –í–°–ï–ú –§–ê–ô–õ–ê–ú:")
                print(f"{result['analysis']}")
            else:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                print(f"üìÅ –§–∞–π–ª: {result['file_name']}")
                print(f"üìÇ –ü—É—Ç—å: {result['file_path']}")
                print(f"üí¨ –ê–Ω–∞–ª–∏–∑: {result['analysis']}")
            
            print("-" * 100)
        
        # –û–±—â–∏–π –æ—Ç—á–µ—Ç
        total_series = len(self.results)
        total_files = sum(result.get('total_files', 1) for result in self.results)
        print(f"\nüìà –û–ë–©–ò–ô –û–¢–ß–ï–¢:")
        print("-" * 50)
        print(f"   –í—Å–µ–≥–æ —Å–µ—Ä–∏–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {total_series}")
        print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_files}")
        print(f"   –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        print("\n" + "="*100)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üî¨ DICOM –ê–ù–ê–õ–ò–ó–ê–¢–û–† –° MEDGEMMA (–£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ debug –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    global DEBUG_MODE
    if "--debug" in sys.argv:
        DEBUG_MODE = True
        sys.argv.remove("--debug")
        print("üêõ DEBUG –†–ï–ñ–ò–ú –í–ö–õ–Æ–ß–ï–ù - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 5-–π —Ñ–∞–π–ª –¥–æ –∫–æ–Ω—Ü–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    model_name = DEFAULT_MODEL
    window_level = DEFAULT_WINDOW_LEVEL
    window_width = DEFAULT_WINDOW_WIDTH
    batch_size = None
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    args_to_remove = []
    
    for i, arg in enumerate(sys.argv):
        if arg.startswith("--model="):
            model_name = arg.split("=")[1]
            args_to_remove.append(arg)
        elif arg == "--model" and i + 1 < len(sys.argv):
            model_name = sys.argv[i + 1]
            args_to_remove.extend([arg, sys.argv[i + 1]])
        elif arg.startswith("--wl="):
            window_level = int(arg.split("=")[1])
            args_to_remove.append(arg)
        elif arg == "--wl" and i + 1 < len(sys.argv):
            window_level = int(sys.argv[i + 1])
            args_to_remove.extend([arg, sys.argv[i + 1]])
        elif arg.startswith("--ww="):
            window_width = int(arg.split("=")[1])
            args_to_remove.append(arg)
        elif arg == "--ww" and i + 1 < len(sys.argv):
            window_width = int(sys.argv[i + 1])
            args_to_remove.extend([arg, sys.argv[i + 1]])
        elif arg.startswith("--window="):
            # –§–æ—Ä–º–∞—Ç: --window=WL,WW –Ω–∞–ø—Ä–∏–º–µ—Ä --window=-550,1600
            wl_ww = arg.split("=")[1].split(",")
            if len(wl_ww) == 2:
                window_level = int(wl_ww[0])
                window_width = int(wl_ww[1])
            args_to_remove.append(arg)
        elif arg.startswith("--pneumonia-window="):
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–Ω–µ–≤–º–æ–Ω–∏–∏
            window_type = arg.split("=")[1]
            if window_type in PNEUMONIA_DETECTION_WINDOWS:
                window_level = PNEUMONIA_DETECTION_WINDOWS[window_type]["wl"]
                window_width = PNEUMONIA_DETECTION_WINDOWS[window_type]["ww"]
                print(f"üîç –í—ã–±—Ä–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–Ω–µ–≤–º–æ–Ω–∏–∏: {window_type}")
            args_to_remove.append(arg)
        elif arg.startswith("--batch-size="):
            # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
            batch_size = int(arg.split("=")[1])
            args_to_remove.append(arg)
        elif arg == "--batch-size" and i + 1 < len(sys.argv):
            batch_size = int(sys.argv[i + 1])
            args_to_remove.extend([arg, sys.argv[i + 1]])
    
    # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    for arg in args_to_remove:
        if arg in sys.argv:
            sys.argv.remove(arg)
    
    print(f"ü§ñ –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: MedGemma-{model_name.upper()}")
    print(f"ü™ü –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫–Ω–∞: WL={window_level}, WW={window_width}")
    if batch_size:
        print(f"üì¶ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    analyzer = DICOMAnalyzer(model_name=model_name, window_level=window_level, window_width=window_width, batch_size=batch_size)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        path = sys.argv[1]
        if os.path.isfile(path):
            analyzer.analyze_single_file(path)
        elif os.path.isdir(path):
            analyzer.analyze_directory(path)
        else:
            print(f"–ü—É—Ç—å {path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π DICOM_FOLDER_PATH
        print(f"\n–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {DICOM_FOLDER_PATH}")
        if DEBUG_MODE:
            print(f"üêõ Debug —Ä–µ–∂–∏–º: –±—É–¥–µ–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π 5-–π —Ñ–∞–π–ª –¥–æ –∫–æ–Ω—Ü–∞")
        
        if os.path.exists(DICOM_FOLDER_PATH):
            analyzer.analyze_directory(DICOM_FOLDER_PATH)
        else:
            print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {DICOM_FOLDER_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            print("–ò–∑–º–µ–Ω–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DICOM_FOLDER_PATH –≤ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å.")
            return
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    analyzer.print_results_table()
    
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()
