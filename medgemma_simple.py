#!/usr/bin/env python3
"""
MedGemma —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º pipeline
"""

import os
import torch
from transformers import pipeline
from PIL import Image
import requests

MODEL_PATH = "/app/models/medgemma_4b"

def main():
    """–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å pipeline"""
    print('üè• MedGemma 4B - Pipeline –ø—Ä–æ–≤–µ—Ä–∫–∞')
    print('=' * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å
    if not os.path.exists(MODEL_PATH):
        print(f'‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {MODEL_PATH}')
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º GPU
    device = "cuda" if torch.cuda.is_available() else "cpu"
    print(f'üñ•Ô∏è  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}')
    
    if device == "cuda":
        print(f'‚úÖ GPU: {torch.cuda.get_device_name(0)}')
        print(f'üíæ –ü–∞–º—è—Ç—å: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB')
    
    try:
        # –°–æ–∑–¥–∞–µ–º pipeline —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏
        print('üîÑ –°–æ–∑–¥–∞–µ–º pipeline —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏...')
        pipe = pipeline(
            "image-text-to-text",
            model=MODEL_PATH,
            model_kwargs={
                "low_cpu_mem_usage": True,
                "device_map": "auto",
                "dtype": torch.float16
            }
        )
        
        print('‚úÖ Pipeline —Å–æ–∑–¥–∞–Ω!')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        print('\nüì∑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...')
        image_url = "https://upload.wikimedia.org/wikipedia/commons/c/c8/Chest_Xray_PA_3-8-2010.png"
        image = Image.open(requests.get(image_url, headers={"User-Agent": "example"}, stream=True).raw)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = [
            {
                "role": "system",
                "content": [{"type": "text", "text": "You are an expert radiologist."}]
            },
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": "Describe this X-ray"},
                    {"type": "image", "image": image}
                ]
            }
        ]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        print('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...')
        output = pipe(text=messages, max_new_tokens=200)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üîç Debug: output type = {type(output)}")
        print(f"üîç Debug: output = {output}")
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
        result = ""
        if isinstance(output, list) and len(output) > 0:
            first_output = output[0]
            if isinstance(first_output, dict):
                if "generated_text" in first_output:
                    result = first_output["generated_text"]
                elif "text" in first_output:
                    result = first_output["text"]
                else:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ª—é–±–æ–≥–æ –ø–æ–ª—è
                    for key, value in first_output.items():
                        if isinstance(value, str) and len(value) > 10:
                            result = value
                            break
                    if not result:
                        result = str(first_output)
            else:
                result = str(first_output)
        elif isinstance(output, str):
            result = output
        else:
            result = str(output)
        
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        if not result or result.strip() == "":
            print("‚ö†Ô∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥...")
            try:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–∑–æ–≤–∞
                simple_output = pipe(image, "Describe this X-ray", max_new_tokens=200)
                if isinstance(simple_output, list) and len(simple_output) > 0:
                    result = str(simple_output[0])
                else:
                    result = str(simple_output)
            except Exception as e2:
                result = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e2}"
        
        print(f'\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢:')
        print('=' * 50)
        print(result)
        print('=' * 50)
        
        print('\nüéâ MedGemma —Ä–∞–±–æ—Ç–∞–µ—Ç!')
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
