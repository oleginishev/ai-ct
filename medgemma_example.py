#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MedGemma 4B –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–∞–¥–∞—á
"""

import os
from transformers import pipeline, AutoProcessor, AutoModelForImageTextToText
from PIL import Image
import torch
import requests

def test_medgemma_loading():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ MedGemma"""
    print('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É MedGemma...')
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω Hugging Face
        if not os.getenv('HUGGINGFACE_HUB_TOKEN'):
            print('‚ö†Ô∏è  –¢–æ–∫–µ–Ω Hugging Face –Ω–µ –Ω–∞–π–¥–µ–Ω!')
            print('üîß –í—ã–ø–æ–ª–Ω–∏—Ç–µ: huggingface-cli login')
            print('üìù –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export HUGGINGFACE_HUB_TOKEN=your_token')
            return False
            
        processor = AutoProcessor.from_pretrained('google/medgemma-4b-it')
        print('‚úÖ Processor –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
        
        model = AutoModelForImageTextToText.from_pretrained(
            'google/medgemma-4b-it',
            torch_dtype=torch.bfloat16,
            device_map='auto'
        )
        print('‚úÖ Model –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
        print('üéâ MedGemma –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!')
        return True
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
        print('üîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:')
        print('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω: echo $HUGGINGFACE_HUB_TOKEN')
        print('2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: huggingface-cli login')
        print('3. –ü—Ä–∏–º–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –Ω–∞: https://huggingface.co/google/medgemma-4b-it')
        return False

def analyze_chest_xray(image_path=None, image_url=None):
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–æ–≥–æ —Å–Ω–∏–º–∫–∞ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏"""
    print('\nü´Å –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–æ–≥–æ —Å–Ω–∏–º–∫–∞ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏...')
    
    try:
        # –°–æ–∑–¥–∞–µ–º pipeline
        pipe = pipeline(
            "image-text-to-text",
            model="google/medgemma-4b-it",
            torch_dtype=torch.bfloat16,
            device="auto",
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if image_path and os.path.exists(image_path):
            image = Image.open(image_path)
            print(f'üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}')
        elif image_url:
            image = Image.open(requests.get(image_url, headers={"User-Agent": "example"}, stream=True).raw)
            print(f'üåê –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å URL: {image_url}')
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_url = "https://upload.wikimedia.org/wikipedia/commons/c/c8/Chest_Xray_PA_3-8-2010.png"
            image = Image.open(requests.get(image_url, headers={"User-Agent": "example"}, stream=True).raw)
            print('üì∑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        messages = [
            {
                "role": "system",
                "content": [{"type": "text", "text": "–í—ã —ç–∫—Å–ø–µ—Ä—Ç-—Ä–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Ç—á–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."}]
            },
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –∏ –æ–ø–∏—à–∏—Ç–µ –ª—é–±—ã–µ –Ω–∞—Ö–æ–¥–∫–∏, –∞–Ω–æ–º–∞–ª–∏–∏ –∏–ª–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –Ω–∞–±–ª—é–¥–∞–µ—Ç–µ. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                    {"type": "image", "image": image}
                ]
            }
        ]
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑
        print('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...')
        output = pipe(text=messages, max_new_tokens=300)
        result = output[0]["generated_text"][-1]["content"]
        
        print('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê:')
        print('=' * 50)
        print(result)
        print('=' * 50)
        
        return result
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}')
        return None

def medical_qa(question):
    """–û—Ç–≤–µ—Ç –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å"""
    print(f'\n‚ùì –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å: {question}')
    
    try:
        # –°–æ–∑–¥–∞–µ–º pipeline –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        pipe = pipeline(
            "text-generation",
            model="google/medgemma-4b-it",
            torch_dtype=torch.bfloat16,
            device="auto",
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        prompt = f"""–í—ã —ç–∫—Å–ø–µ—Ä—Ç-–º–µ–¥–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å —Ç–æ—á–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:

–í–æ–ø—Ä–æ—Å: {question}

–û—Ç–≤–µ—Ç:"""
        
        print('üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å...')
        output = pipe(prompt, max_new_tokens=200, do_sample=False)
        result = output[0]["generated_text"][len(prompt):].strip()
        
        print('\nüìã –û–¢–í–ï–¢:')
        print('=' * 50)
        print(result)
        print('=' * 50)
        
        return result
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}')
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print('üè• MedGemma 4B - –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è')
    print('=' * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    if not test_medgemma_loading():
        return
    
    print('\n' + '=' * 50)
    print('üéØ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò MEDGEMMA:')
    print('1. –ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Ä–µ–Ω—Ç–≥–µ–Ω, –ö–¢, –ú–†–¢)')
    print('2. –û—Ç–≤–µ—Ç—ã –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã')
    print('3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤')
    print('4. –í–∏–∑—É–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å–Ω–æ-–æ—Ç–≤–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑')
    print('5. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
    
    # –ü—Ä–∏–º–µ—Ä 1: –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–æ–≥–æ —Å–Ω–∏–º–∫–∞
    print('\n' + '=' * 50)
    print('üìã –ü–†–ò–ú–ï–† 1: –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–æ–≥–æ —Å–Ω–∏–º–∫–∞')
    analyze_chest_xray()
    
    # –ü—Ä–∏–º–µ—Ä 2: –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å
    print('\n' + '=' * 50)
    print('üìã –ü–†–ò–ú–ï–† 2: –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å')
    medical_qa("–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã –ø–Ω–µ–≤–º–æ–Ω–∏–∏?")
    
    print('\n' + '=' * 50)
    print('‚úÖ –ü—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!')
    print('üí° MedGemma –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –¥–ª—è –≤–∞—à–∏—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–∞–¥–∞—á!')

if __name__ == "__main__":
    main()
